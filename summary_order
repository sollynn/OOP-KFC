from fasthtml.common import *

app, rt = fast_app()

class Order:
    def __init__(self, order_ID, order_type, member):
        self.__order_ID = order_ID
        self.__order_type = order_type.lower() if order_type.lower() in ["delivery", "pickup"] else "Invalid"
        self.__member = member

    def get_order_type(self):
        return self.__order_type


class System:
    def __init__(self):
        self.__branch = []
        self.__stock = []
        self.__promotion_list = []
        self.__member_list = []

    def search_member(self, ID):
        for member in self.__member_list:
            if member.get_id() == ID:
                return member
        return None

    def create_member(self, username, password):
        new_member = Member(username, password, [], Basket())
        self.__member_list.append(new_member)
        return new_member

    def get_coupon(self, coupon_code):
        for promotion in self.__promotion_list:
            if promotion.verify_coupon(coupon_code):
                return promotion
        return None

    def summary_order(self, member_id, order: Order):
        member = self.search_member(member_id)
        if not member:
            return None
        summary = member.summary_order(order)



class Promotion:
    def __init__(self, coupon_code, discount):
        self.__coupon_code = coupon_code
        self.__discount = discount
    
    def verify_coupon(self, coupon_code):
        return self.__coupon_code == coupon_code
    
    def get_discount(self):
        return self.__discount


class PickedItem:
    def __init__(self, product, quantity):
        self.__product = product
        self.__quantity = quantity

    def get_item_info(self):
        return {
            "name": self.__product["name"],
            "price": self.__product["price"],
            "quantity": self.__quantity
        }


class Basket:
    def __init__(self):
        self.__items = []

    def add_basket_item(self, item: PickedItem):
        self.__items.append(item)

    def item_selected(self, system, coupon_code=""):
        items = [item.get_item_info() for item in self.__items]
        total_price = sum(item["price"] * item["quantity"] for item in items)
        discount_applied = 0
        discount_include = total_price  

        if coupon_code:
            promotion = system.get_coupon(coupon_code)
            if promotion:
                discount_applied = total_price * promotion.get_discount()
                discount_include = total_price - discount_applied 

        return items, total_price, discount_applied, discount_include


class Member:
    def __init__(self, username, password, order_history, current_basket: Basket):
        self.__username = username
        self.__password = password
        self.__order_history = order_history
        self.__current_basket = current_basket
        self.__member_info = None

    def summary_order(self, order: Order):
        if not self.__member_info:
            return None
        
        basket_items, total_price, discount_applied, discount_include = self.view_basket()
        order_type = order.get_order_type()
        return [self.__member_info, basket_items, total_price, order_type, discount_applied]

    def get_id(self):
        return self.__username

    def view_basket(self):
        return self.__current_basket.item_selected(system)

    def set_member_info(self, account):
        self.__member_info = account.get_member_info()


class Account:
    def __init__(self, name, surname, account_ID, tel_no, address, email):
        self.__name = name
        self.__surname = surname
        self.__account_ID = account_ID
        self.__tel_no = tel_no
        self.__address = address
        self.__email = email

    def get_member_info(self):
        return [self.__name, self.__surname, self.__account_ID, self.__tel_no, self.__address, self.__email]


system = System()
member = system.create_member("somchai123", "1234")
account = Account("Somchai", "Jaidee", "somchai123", "081-234-5678", "123/45 Sukhumvit Rd, Bangkok", "somchai@example.com")
member.set_member_info(account)

basket = member._Member__current_basket
basket.add_basket_item(PickedItem({"name": "Fried Chicken", "price": 50}, 2))
basket.add_basket_item(PickedItem({"name": "Chips", "price": 35}, 1))

order = Order("ORDER123", "Delivery", member)



@rt('/summary')
def summary_page():
    
    
    bg_color = "#121212"
    text_color = "#f5f5f5"
    card_bg = "#424242"
    card_text = "#ffffff"
    border_color = "#555555"
  
    member_id = "somchai123"
    order = Order("ORDER123", "Delivery", None)

    summary = system.summary_order(member_id, order)

    if not summary:
        return H1("Member not found", style=f"color: red; text-align: center;")

    user_info, items, total_price, order_type ,discount_applied = summary

    member_info_group = Card(
        H2("Customer Information", style=f"margin-bottom: 15px; color: #C5D6BA;"),
        Div(
            P(f"Name: {user_info[0]} {user_info[1]}", style=f"color: {card_text};"),
            P(f"Order Type: {order_type}", style=f"color: {card_text};"),
            P(f"Address: {user_info[4]}", style=f"color: {card_text};"),
            P(f"Phone Number: {user_info[3]}", style=f"color: {card_text};"),
            P(f"Order ID: ORDER123", style=f"color: {card_text};"),
            style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;"
        ),
        style=f"padding: 20px; margin-bottom: 20px; background-color: {card_bg}; border: 1px solid {border_color}; border-radius: 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.1);"
    )

    basket_group = Grid(
        *[
            Card(
                H3(item["name"], style=f"margin-bottom: 5px; color: #F5E3CB;"),
                P(f"Quantity: {item['quantity']} pcs", style=f"color: {card_text};"),
                P(f"Unit Price: {item['price']} THB", style=f"color: {card_text};"),
                P(f"Subtotal: {item['quantity'] * item['price']} THB", style=f"color: {card_text};"),
                style=f"padding: 15px; background-color: {card_bg}; border: 1px solid {border_color}; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);"
            )
            for item in items
        ],
        style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 10px;"
    )

    coupon_and_total_group = Card(
        H2("Order Summary", style=f"margin-bottom: 10px; color:#9BC2B2;"),
        H3(f"Discount Applied: {discount_applied} THB"),


        H3(f"Total Price: {total_price} THB", style=f"color: #9BC2B2;"),

        style=f"padding: 20px; margin-top: 20px; background-color: {card_bg}; border: 1px solid {border_color}; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"
    )

    return Container(
        H1("Order Summary", style=f"text-align: center; margin-bottom: 30px; color: {text_color};"),
        member_info_group,
        H2("Items in Basket", style=f"margin-top: 20px; color: #F6C8B6;"),
        basket_group,
        coupon_and_total_group,
        style=f"padding: 30px; background-color: {bg_color}; min-height: 100vh;"
    )


serve()
