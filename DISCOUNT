from fasthtml.common import *
app, rt = fast_app()

class System:
    def __init__(self):
        self.__branch = []
        self.__stock = []
        self.__promotion_list = []
        self.__member_list = []
        self.__list_stock = []

    def search_member(self, ID):
        for member in self.__member_list:
            if member.get_id() == ID:
                return member
        return None
    
    def add_promotion(self, promotion):
        self.__promotion_list.append(promotion)
    
    def remove_promotion(self, promotion):
        if promotion in self.__promotion_list:
            self.__promotion_list.remove(promotion)
    
    def get_coupon(self, coupon_code):
        for promotion in self.__promotion_list:
            if promotion.verify_coupon(coupon_code):
                print(f"Coupon {coupon_code} found with {promotion.get_discount()*100}% discount")  # Debugging
                return promotion
        print(f"Coupon {coupon_code} not found")  # Debugging
        return None
    
    def view_basket(self, member, coupon_code=""):
        return member.view_basket(coupon_code)

    def create_member(self, username, password):
        new_member = Member(username, password, [], Basket())
        self.__member_list.append(new_member)
        return new_member


class Promotion:
    def __init__(self, coupon_code, discount):
        self.__coupon_code = coupon_code
        self.__discount = discount
    
    def verify_coupon(self, coupon_code):
        return self.__coupon_code == coupon_code
    
    def get_discount(self):
        return self.__discount


class PickedItem:
    def __init__(self, product_name, price, quantity):
        self.__name = product_name  
        self.__price = price
        self.__quantity = quantity

    def get_item_info(self):
        return {
            "name": self.__name,
            "price": self.__price,
            "quantity": self.__quantity
        }


class Basket:
    def __init__(self):
        self.__items = []

    def add_basket_item(self, item: PickedItem):
        if isinstance(item, PickedItem):
            self.__items.append(item)
            return "Done"
        else:
            return "Error"

    def calculate_total_price(self):
        return sum(
            item.get_item_info()["price"] * item.get_item_info()["quantity"] for item in self.__items
        )
    
    def item_selected(self, coupon_code=""):
        items = [item.get_item_info() for item in self.__items]
        total_price = self.calculate_total_price()
        discount_applied = 0
        discount_include = total_price  # ตั้งค่าให้เริ่มต้นเป็นราคาปกติ

        if coupon_code:
            promotion = system.get_coupon(coupon_code)
            if promotion:
                discount_applied = total_price * promotion.get_discount()
                discount_include = total_price - discount_applied  # ราคาหลังลด

        print(f"Applied Discount: {discount_applied}, New Total: {discount_include}")  # Debugging

        return items, total_price, discount_applied, discount_include


class Member:
    def __init__(self, username, password, order_history, current_basket: Basket):
        self.__username = username
        self.__password = password
        self.__order_history = order_history
        self.__current_basket = current_basket

    def get_id(self):
        return self.__username

    def view_basket(self, coupon_code=""):
        return self.__current_basket.item_selected(coupon_code)


system = System()

# สร้างผู้ใช้ตัวอย่าง
member = system.create_member("user1", "pass123")
member._Member__current_basket.add_basket_item(PickedItem("ไก่ทอด", 20, 2))
member._Member__current_basket.add_basket_item(PickedItem("นักเก็ต", 30, 1))

# เพิ่มโปรโมชั่นตัวอย่าง
system.add_promotion(Promotion("DISCOUNT10", 0.10))  # ส่วนลด 10%
system.add_promotion(Promotion("DISCOUNT20", 0.20))  # ส่วนลด 20%


@rt("/basket")
def view_basket(coupon_code: str = ""):
    print(f"Received Coupon Code: {coupon_code}")  # Debugging

    member = system.search_member("user1")
    if not member:
        return H1("Member not found")

    items, total_price, discount_applied, discount_include = member.view_basket(coupon_code)

    return Container(
        H1("Your Basket"),
        Grid(
            *[
                Card(
                    H3(item["name"]),
                    P(f"Quantity: {item['quantity']}"),
                    P(f"{item['price']} THB"),
                )
                for item in items
            ]
        ),
        Form(
            Label("Enter coupon code", Input(name="coupon_code", placeholder="Coupon code", value=coupon_code)),
            Button("Use Code"),
            method="get",
            action="/basket"
        ),
        Div(
            H3(f"Total Price (Before Discount): {total_price:.2f} THB"),
            H3(f"Discount Applied: {discount_applied:.2f} THB"),
            H3(f"Total After Discount: {discount_include:.2f} THB"),
            Button("Checkout", onclick="window.location='/payment'", style="background-color: green; color: white; padding: 10px 20px; border: none;")
        ),
    )


if __name__ == "__main__":
    serve()
